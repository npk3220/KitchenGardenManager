// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(HomeGardenContext))]
    [Migration("20240816081124_Seeder")]
    partial class Seeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Garden", b =>
                {
                    b.Property<int>("GardenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManagementEnded")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GardenId");

                    b.HasIndex("UserId");

                    b.ToTable("Gardens");

                    b.HasData(
                        new
                        {
                            GardenId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9821),
                            IsManagementEnded = false,
                            Location = "Backyard",
                            Name = "Main Garden",
                            Size = 100.5,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9822),
                            UserId = 1
                        },
                        new
                        {
                            GardenId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9823),
                            IsManagementEnded = false,
                            Location = "Front Yard",
                            Name = "Front Yard Garden",
                            Size = 50.0,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9824),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Models.GardenHistory", b =>
                {
                    b.Property<int>("GardenHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenHistoryId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GardenHistoryId");

                    b.HasIndex("GardenId");

                    b.ToTable("GardenHistories");

                    b.HasData(
                        new
                        {
                            GardenHistoryId = 1,
                            ActionDate = new DateTime(2024, 8, 6, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9960),
                            ActionType = "Fertilization",
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9964),
                            Details = "Added compost",
                            GardenId = 1,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9964)
                        },
                        new
                        {
                            GardenHistoryId = 2,
                            ActionDate = new DateTime(2024, 8, 11, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9966),
                            ActionType = "Measurement",
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9966),
                            Details = "Soil pH measured",
                            GardenId = 1,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9967)
                        },
                        new
                        {
                            GardenHistoryId = 3,
                            ActionDate = new DateTime(2024, 8, 6, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9968),
                            ActionType = "Fertilization",
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9969),
                            Details = "Added compost",
                            GardenId = 2,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9969)
                        });
                });

            modelBuilder.Entity("Models.GardenPlantRelation", b =>
                {
                    b.Property<int>("GardenPlantRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenPlantRelationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GardenPlantRelationId");

                    b.HasIndex("GardenId");

                    b.HasIndex("PlantId");

                    b.ToTable("GardenPlantRelations");

                    b.HasData(
                        new
                        {
                            GardenPlantRelationId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9991),
                            GardenId = 1,
                            PlantId = 1,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9992)
                        },
                        new
                        {
                            GardenPlantRelationId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9993),
                            GardenId = 1,
                            PlantId = 2,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9994)
                        });
                });

            modelBuilder.Entity("Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantMasterId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9887),
                            Name = "Tomato",
                            PlantMasterId = 1,
                            Quantity = 10,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9888)
                        },
                        new
                        {
                            PlantId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9889),
                            Name = "Mystery Plant",
                            Quantity = 5,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9889)
                        });
                });

            modelBuilder.Entity("Models.PlantHistory", b =>
                {
                    b.Property<int>("PlantHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantHistoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("PlantStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantHistoryId");

                    b.HasIndex("PlantId");

                    b.HasIndex("PlantStatusId");

                    b.ToTable("PlantHistories");

                    b.HasData(
                        new
                        {
                            PlantHistoryId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(15),
                            EventDate = new DateTime(2024, 7, 17, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(14),
                            PlantId = 1,
                            PlantStatusId = 1,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(15)
                        },
                        new
                        {
                            PlantHistoryId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(17),
                            EventDate = new DateTime(2024, 8, 11, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(16),
                            PlantId = 1,
                            PlantStatusId = 2,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(17)
                        },
                        new
                        {
                            PlantHistoryId = 3,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(19),
                            EventDate = new DateTime(2024, 7, 27, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(19),
                            PlantId = 2,
                            PlantStatusId = 1,
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 111, DateTimeKind.Local).AddTicks(20)
                        });
                });

            modelBuilder.Entity("Models.PlantMaster", b =>
                {
                    b.Property<int>("PlantMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantMasterId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptimalConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantFamily")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantMasterId");

                    b.ToTable("PlantMasters");

                    b.HasData(
                        new
                        {
                            PlantMasterId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9855),
                            Description = "A red fruit commonly used in cooking.",
                            OptimalConditions = "Full sun, moderate watering",
                            PlantFamily = "Solanaceae",
                            PlantName = "Tomato",
                            ScientificName = "Solanum lycopersicum",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9856)
                        },
                        new
                        {
                            PlantMasterId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9857),
                            Description = "An orange root vegetable.",
                            OptimalConditions = "Full sun, well-drained soil",
                            PlantFamily = "Apiaceae",
                            PlantName = "Carrot",
                            ScientificName = "Daucus carota",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9858)
                        });
                });

            modelBuilder.Entity("Models.PlantStatusMaster", b =>
                {
                    b.Property<int>("PlantStatusMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantStatusMasterId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantStatusMasterId");

                    b.ToTable("PlantStatusMasters");

                    b.HasData(
                        new
                        {
                            PlantStatusMasterId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9919),
                            Description = "The plant has been planted.",
                            StatusName = "plant",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9920)
                        },
                        new
                        {
                            PlantStatusMasterId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9921),
                            Description = "The plant has sprouted.",
                            StatusName = "sprouting",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9922)
                        },
                        new
                        {
                            PlantStatusMasterId = 3,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9923),
                            Description = "The plant has been harvested.",
                            StatusName = "harvest",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9923)
                        },
                        new
                        {
                            PlantStatusMasterId = 4,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9924),
                            Description = "The plant is blooming.",
                            StatusName = "blooming",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9924)
                        },
                        new
                        {
                            PlantStatusMasterId = 5,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9925),
                            Description = "The plant has withered.",
                            StatusName = "withering",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9925)
                        },
                        new
                        {
                            PlantStatusMasterId = 6,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9926),
                            Description = "Fertilization has been applied.",
                            StatusName = "fertilization",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9927)
                        },
                        new
                        {
                            PlantStatusMasterId = 7,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9928),
                            Description = "The plant is affected by pests or diseases.",
                            StatusName = "pest",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9928)
                        },
                        new
                        {
                            PlantStatusMasterId = 8,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9929),
                            Description = "The plant has been removed.",
                            StatusName = "remove",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9929)
                        },
                        new
                        {
                            PlantStatusMasterId = 9,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9930),
                            Description = "Other status not specified.",
                            StatusName = "other",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9931)
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9702),
                            Email = "admin@example.com",
                            PasswordHash = "hashed_password_123",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9719),
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9721),
                            Email = "user1@example.com",
                            PasswordHash = "hashed_password_456",
                            UpdatedAt = new DateTime(2024, 8, 16, 17, 11, 24, 110, DateTimeKind.Local).AddTicks(9721),
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("Models.Garden", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Gardens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.GardenHistory", b =>
                {
                    b.HasOne("Models.Garden", "Garden")
                        .WithMany("GardenHistories")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garden");
                });

            modelBuilder.Entity("Models.GardenPlantRelation", b =>
                {
                    b.HasOne("Models.Garden", "Garden")
                        .WithMany("GardenPlantRelations")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Plant", "Plant")
                        .WithMany("GardenPlantRelations")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garden");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Models.PlantHistory", b =>
                {
                    b.HasOne("Models.Plant", "Plant")
                        .WithMany("PlantHistories")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.PlantStatusMaster", "PlantStatus")
                        .WithMany()
                        .HasForeignKey("PlantStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("PlantStatus");
                });

            modelBuilder.Entity("Models.Garden", b =>
                {
                    b.Navigation("GardenHistories");

                    b.Navigation("GardenPlantRelations");
                });

            modelBuilder.Entity("Models.Plant", b =>
                {
                    b.Navigation("GardenPlantRelations");

                    b.Navigation("PlantHistories");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Gardens");
                });
#pragma warning restore 612, 618
        }
    }
}
